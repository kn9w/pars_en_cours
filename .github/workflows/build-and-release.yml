name: Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Setup repo
      uses: actions/checkout@v4
      
    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup environment variables
      run: |
        echo "EXPO_PUBLIC_MAPBOX_PUBLIC_TOKEN=${{ secrets.MAPBOX_PUBLIC_TOKEN }}" >> .env
        echo "MAPBOX_DOWNLOAD_TOKEN=${{ secrets.MAPBOX_DOWNLOAD_TOKEN }}" >> .env
        echo "EXPO_PUBLIC_EAS_PROJECT_ID=${{ secrets.EAS_PROJECT_ID }}" >> .env
        echo "EXPO_PUBLIC_ENABLE_MAPBOX=true" >> .env
        
    - name: Setup EAS credentials
      run: |
        # Create credentials.json for EAS
        mkdir -p .eas-credentials
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > .eas-credentials/release.keystore
        
        cat > credentials.json << EOF
        {
          "android": {
            "keystore": {
              "keystorePath": ".eas-credentials/release.keystore",
              "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
              "keyAlias": "${{ secrets.ANDROID_KEY_ALIAS }}",
              "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
            }
          }
        }
        EOF
        
        echo "✅ EAS credentials configured"
        
    - name: Extract version from app.json
      id: version
      run: |
        VERSION=$(node -p "require('./app.json').expo.version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Build Android APKs with EAS
      run: eas build --platform android --profile production --local --non-interactive
      env:
        EXPO_PUBLIC_MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
        MAPBOX_DOWNLOAD_TOKEN: ${{ secrets.MAPBOX_DOWNLOAD_TOKEN }}
        EXPO_PUBLIC_EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID }}
        EXPO_PUBLIC_ENABLE_MAPBOX: true

    - name: Find and organize APKs
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Create directory for release artifacts
        mkdir -p release-apks
        
        # Find the build output directory
        BUILD_DIR="android/app/build/outputs/apk/release"
        
        if [ ! -d "$BUILD_DIR" ]; then
          echo "❌ Error: Build output directory not found: $BUILD_DIR"
          exit 1
        fi
        
        # Find and copy all APKs with proper naming
        APK_COUNT=0
        for apk in "$BUILD_DIR"/*.apk; do
          if [ -f "$apk" ]; then
            filename=$(basename "$apk")
            
            # Extract architecture from filename
            if [[ "$filename" =~ (arm64-v8a|armeabi-v7a|x86_64|x86|universal) ]]; then
              arch="${BASH_REMATCH[1]}"
              new_name="pars-en-cours-v${VERSION}-${arch}.apk"
              cp "$apk" "release-apks/$new_name"
              
              # Get file size
              size=$(du -h "release-apks/$new_name" | cut -f1)
              echo "✅ Found APK: $new_name ($size)"
              APK_COUNT=$((APK_COUNT + 1))
            else
              # Fallback for single APK without architecture suffix
              new_name="pars-en-cours-v${VERSION}.apk"
              cp "$apk" "release-apks/$new_name"
              size=$(du -h "release-apks/$new_name" | cut -f1)
              echo "✅ Found APK: $new_name ($size)"
              APK_COUNT=$((APK_COUNT + 1))
            fi
          fi
        done
        
        if [ $APK_COUNT -eq 0 ]; then
          echo "❌ Error: No APK files found in $BUILD_DIR"
          exit 1
        fi
        
        echo "✅ Total APKs found: $APK_COUNT"
        
        # Verify we have the expected number (should be 5 with universal APK)
        if [ $APK_COUNT -ne 5 ]; then
          echo "⚠️  Warning: Expected 5 APKs (4 arch-specific + 1 universal), but found $APK_COUNT"
        fi
        
    - name: Generate checksums
      run: |
        cd release-apks
        
        for apk in *.apk; do
          if [ -f "$apk" ]; then
            echo "Generating checksums for $apk..."
            sha256sum "$apk" > "${apk}.sha256"
            md5sum "$apk" > "${apk}.md5"
          fi
        done
        
        echo "✅ Checksums generated for all APKs"
        
    - name: Extract release notes from CHANGELOG.md
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        if [ ! -f "CHANGELOG.md" ]; then
          echo "❌ Error: CHANGELOG.md not found"
          exit 1
        fi
        
        # Extract content between current version and next version (or EOF)
        # This handles both single-version and multi-version CHANGELOGs
        awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{if(flag) exit} flag" CHANGELOG.md > /tmp/release_notes.md
        
        if [ ! -s /tmp/release_notes.md ]; then
          echo "❌ Error: No release notes found for version ${VERSION} in CHANGELOG.md"
          exit 1
        fi
        
        echo "✅ Extracted release notes for version ${VERSION}"
                
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
      run: |
        cd release-apks
        
        # Create release with all APKs and checksums
        echo "Creating release for tag: $tag"
        echo "Uploading files:"
        ls -lh
        
        gh release create "$tag" \
          --repo="$GITHUB_REPOSITORY" \
          --title="Release ${tag#v}" \
          --notes-file /tmp/release_notes.md \
          *.apk \
          *.apk.sha256 \
          *.apk.md5
        
        echo "✅ Release created successfully with all APKs"
