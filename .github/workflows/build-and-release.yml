name: Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Setup repo
      uses: actions/checkout@v4
      
    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Setup Expo and EAS
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        eas-version: latest
        token: ${{ secrets.EXPO_TOKEN }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup environment variables
      run: |
        echo "EXPO_PUBLIC_MAPBOX_PUBLIC_TOKEN=${{ secrets.MAPBOX_PUBLIC_TOKEN }}" >> .env
        echo "MAPBOX_DOWNLOAD_TOKEN=${{ secrets.MAPBOX_DOWNLOAD_TOKEN }}" >> .env
        echo "EXPO_PUBLIC_EAS_PROJECT_ID=${{ secrets.EAS_PROJECT_ID }}" >> .env
        echo "EXPO_PUBLIC_ENABLE_MAPBOX=true" >> .env
        
    - name: Setup Android Keystore
      run: |
        # Create keystore directory
        mkdir -p android/keystore
        
        # Create keystore.properties file with secrets
        cat > android/keystore/keystore.properties << EOF
        storeFile=../keystore/release.keystore
        storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        EOF
        
        # Create keystore from base64 encoded secret
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystore/release.keystore
        
        # Create credentials.json for EAS local credentials
        cat > credentials.json << EOF
        {
          "android": {
            "keystore": {
              "keystorePath": "android/keystore/release.keystore",
              "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
              "keyAlias": "${{ secrets.ANDROID_KEY_ALIAS }}",
              "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
            }
          }
        }
        EOF
        
        # Verify keystore file exists and is valid
        if [ ! -f android/keystore/release.keystore ]; then
          echo "❌ Error: Keystore file was not created"
          exit 1
        fi
        
        # Verify keystore is valid (this will fail if keystore is corrupted)
        keytool -list -keystore android/keystore/release.keystore -storepass "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" -alias "${{ secrets.ANDROID_KEY_ALIAS }}" > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "✅ Keystore validated successfully"
        else
          echo "❌ Error: Keystore validation failed - check your keystore file and passwords"
          exit 1
        fi
        
    - name: Extract version from app.json
      id: version
      run: |
        VERSION=$(node -p "require('./app.json').expo.version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        
    - name: Build Android APK
      run: eas build --platform android --profile production --local --output ${{ github.workspace }}/pars-en-cours-v${{ steps.version.outputs.version }}.apk
      env:
        EXPO_PUBLIC_MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
        MAPBOX_DOWNLOAD_TOKEN: ${{ secrets.MAPBOX_DOWNLOAD_TOKEN }}
        EXPO_PUBLIC_EAS_PROJECT_ID: ${{ secrets.EAS_PROJECT_ID }}
        EXPO_PUBLIC_ENABLE_MAPBOX: true

    - name: Verify APK was created
      run: |
        APK_PATH="${{ github.workspace }}/pars-en-cours-v${{ steps.version.outputs.version }}.apk"
        if [ ! -f "$APK_PATH" ]; then
          echo "❌ Error: APK file was not created at $APK_PATH"
          exit 1
        fi
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        echo "✅ APK created successfully: $APK_SIZE"
        
    - name: Generate checksums
      run: |
        cd ${{ github.workspace }}
        sha256sum pars-en-cours-v${{ steps.version.outputs.version }}.apk > pars-en-cours-v${{ steps.version.outputs.version }}.apk.sha256
        md5sum pars-en-cours-v${{ steps.version.outputs.version }}.apk > pars-en-cours-v${{ steps.version.outputs.version }}.apk.md5
        
    - name: Extract release notes from CHANGELOG.md
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        if [ ! -f "CHANGELOG.md" ]; then
          echo "❌ Error: CHANGELOG.md not found"
          exit 1
        fi
        
        # Extract content between current version and next version (or EOF)
        # This handles both single-version and multi-version CHANGELOGs
        awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{if(flag) exit} flag" CHANGELOG.md > /tmp/release_notes.md
        
        if [ ! -s /tmp/release_notes.md ]; then
          echo "❌ Error: No release notes found for version ${VERSION} in CHANGELOG.md"
          exit 1
        fi
        
        echo "✅ Extracted release notes for version ${VERSION}"
                
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref_name }}
      run: |
        gh release create "$tag" \
          --repo="$GITHUB_REPOSITORY" \
          --title="Release ${tag#v}" \
          --notes-file /tmp/release_notes.md \
          pars-en-cours-v${{ steps.version.outputs.version }}.apk \
          pars-en-cours-v${{ steps.version.outputs.version }}.apk.sha256 \
          pars-en-cours-v${{ steps.version.outputs.version }}.apk.md5
